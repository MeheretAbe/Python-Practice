
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "70078771-2b11-49fd-aab9-e6f36eac4bd0",
   "metadata": {},
   "outputs": [],
   "source": [
    "data= [\"Mark Antony\",\"John Chan\",\"Bret Lee\",\"Jim Nick\",\"Janice Ken\",\"Florida Thomson\",\"Lily Jason\",\"Matt Antony\",\"Mark Thomas\",\n",
    "      \"Kenny Peterson\",\"Joe Cook\",\"Alexander Thomas\",\"Katy Perry\",\"Alexanderia Peterson\",\"Mark Antony\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "11ba78fc-4545-4531-a687-036afe73641d",
   "metadata": {},
   "source": [
    "## Task 1\n",
    "- Later, five more students approach Julia to participate in the Spell Bee competition. Help Julia to add these five names, one by one, to the existing list of 15 students.\n",
    "\n",
    "- Note: Accept the names of the five students as an input from the user. Do not use a prepopulated list of names."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "6b5687e0-82cb-48c1-a4b7-60d9229ed73c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter the name: DG\n",
      "enter the name: MR\n",
      "enter the name: SW\n",
      "enter the name: JM\n",
      "enter the name: DL\n"
     ]
    }
   ],
   "source": [
    "data= [\"Mark Antony\",\"John Chan\",\"Bret Lee\",\"Jim Nick\",\"Janice Ken\",\"Florida Thomson\",\"Lily Jason\",\"Matt Antony\",\"Mark Thomas\",\n",
    "      \"Kenny Peterson\",\"Joe Cook\",\"Alexander Thomas\",\"Katy Perry\",\"Alexanderia Peterson\",\"Mark Antony\"]\n",
    "\n",
    "for x in range(0,5):\n",
    "    name= input('enter the name:')\n",
    "    data.append(name)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f3f74f6b-5bd3-47cd-8cf1-1a77579173ed",
   "metadata": {},
   "source": [
    "## Task 2\n",
    "- Later, five more students approach Julia to participate in the Spell Bee competition. Help Julia to add these five names, one by one, to the existing list of 15 students.\n",
    "- Note: Accept the names of the five students as an input from the user. Do not use a prepopulated list of names."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "da2bbc5e-9d2c-4cab-8a48-7a821d85d659",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DL\n",
      "JM\n",
      "SW\n",
      "MR\n",
      "DG\n",
      "Mark Antony\n",
      "Alexanderia Peterson\n",
      "Katy Perry\n",
      "Alexander Thomas\n",
      "Joe Cook\n",
      "Kenny Peterson\n",
      "Mark Thomas\n",
      "Matt Antony\n",
      "Lily Jason\n",
      "Florida Thomson\n",
      "Janice Ken\n",
      "Jim Nick\n",
      "Bret Lee\n",
      "John Chan\n"
     ]
    }
   ],
   "source": [
    "data.reverse()\n",
    "for i in data:\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71f76755-f4bc-4aca-8bee-ab13d272755a",
   "metadata": {},
   "source": [
    "## Task 3\n",
    "- Later, five more students approach Julia to participate in the Spell Bee competition. Help Julia to add these five names, one by one, to the existing list of 15 students.\n",
    "- Note: Accept the names of the five students as an input from the user. Do not use a prepopulated list of names."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "ba8f024d-c7e4-47a9-9ec8-e260f5c06560",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DG\n",
      "MR\n",
      "SW\n",
      "JM\n",
      "DL\n",
      "Mark Antony\n",
      "Alexanderia Peterson\n",
      "Katy Perry\n",
      "Alexander Thomas\n",
      "Joe Cook\n",
      "Kenny Peterson\n",
      "Mark Thomas\n",
      "Matt Antony\n",
      "Lily Jason\n",
      "Florida Thomson\n",
      "Janice Ken\n",
      "Jim Nick\n",
      "Bret Lee\n",
      "John Chan\n",
      "Mark Antony\n"
     ]
    }
   ],
   "source": [
    "for x in data[::-1]: # begining to the end , -1\n",
    "    print(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3630eea-12f3-4c90-9f69-ea46c2640b50",
   "metadata": {},
   "source": [
    "## Task 4\n",
    "- Help Julia check for any duplicate entries in the list of 20 student names. Create a new list named final_list that does not repeat any of the names."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "8e3df279-78f3-4f2e-b725-2ecff03d7f3f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DL 1\n",
      "JM 1\n",
      "SW 1\n",
      "MR 1\n",
      "DG 1\n",
      "Mark Antony 1\n",
      "Alexanderia Peterson 1\n",
      "Katy Perry 1\n",
      "Alexander Thomas 1\n",
      "Joe Cook 1\n",
      "Kenny Peterson 1\n",
      "Mark Thomas 1\n",
      "Matt Antony 1\n",
      "Lily Jason 1\n",
      "Florida Thomson 1\n",
      "Janice Ken 1\n",
      "Jim Nick 1\n",
      "Bret Lee 1\n",
      "John Chan 1\n"
     ]
    }
   ],
   "source": [
    "for name in data:\n",
    "    print(name,data.count(name))# the number of times the duplicates are in the data list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "1e99b716-b341-40be-a277-d2e0b68e5a54",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Jim Nick 1\n",
      "Katy Perry 1\n",
      "Kenny Peterson 1\n",
      "SW 1\n",
      "Janice Ken 1\n",
      "Alexander Thomas 1\n",
      "DL 1\n",
      "MR 1\n",
      "Mark Antony 1\n",
      "John Chan 1\n",
      "DG 1\n",
      "Florida Thomson 1\n",
      "Mark Thomas 1\n",
      "Alexanderia Peterson 1\n",
      "Joe Cook 1\n",
      "JM 1\n",
      "Matt Antony 1\n",
      "Bret Lee 1\n",
      "Lily Jason 1\n"
     ]
    }
   ],
   "source": [
    "for name in set(data):\n",
    "    print(name, data.count(name)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "3154d962-f48f-4851-b2a2-19545474ccd7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Alexander Thomas',\n",
       " 'Alexanderia Peterson',\n",
       " 'Bret Lee',\n",
       " 'DG',\n",
       " 'DL',\n",
       " 'Florida Thomson',\n",
       " 'JM',\n",
       " 'Janice Ken',\n",
       " 'Jim Nick',\n",
       " 'Joe Cook',\n",
       " 'John Chan',\n",
       " 'Katy Perry',\n",
       " 'Kenny Peterson',\n",
       " 'Lily Jason',\n",
       " 'MR',\n",
       " 'Mark Antony',\n",
       " 'Mark Thomas',\n",
       " 'Matt Antony',\n",
       " 'SW'}"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "set(data) #duplicates are automatically removed when a set is created"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "a5a3ac31-071a-4f9e-b498-db672adc6265",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['DL',\n",
       " 'JM',\n",
       " 'SW',\n",
       " 'MR',\n",
       " 'DG',\n",
       " 'Mark Antony',\n",
       " 'Alexanderia Peterson',\n",
       " 'Katy Perry',\n",
       " 'Alexander Thomas',\n",
       " 'Joe Cook',\n",
       " 'Kenny Peterson',\n",
       " 'Mark Thomas',\n",
       " 'Matt Antony',\n",
       " 'Lily Jason',\n",
       " 'Florida Thomson',\n",
       " 'Janice Ken',\n",
       " 'Jim Nick',\n",
       " 'Bret Lee',\n",
       " 'John Chan']"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data # duplicates without set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "a7ccd423-5971-4fda-8936-4c077fae41ed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['DL',\n",
       " 'JM',\n",
       " 'SW',\n",
       " 'MR',\n",
       " 'DG',\n",
       " 'Mark Antony',\n",
       " 'Alexanderia Peterson',\n",
       " 'Katy Perry',\n",
       " 'Alexander Thomas',\n",
       " 'Joe Cook',\n",
       " 'Kenny Peterson',\n",
       " 'Mark Thomas',\n",
       " 'Matt Antony',\n",
       " 'Lily Jason',\n",
       " 'Florida Thomson',\n",
       " 'Janice Ken',\n",
       " 'Jim Nick',\n",
       " 'Bret Lee',\n",
       " 'John Chan']"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_list= data  #remove duplicate elements from a list \n",
    "for i in final_list:\n",
    "   if final_list.count(i)>1:\n",
    "       final_list.remove(i)\n",
    "final_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "fd372e22-2399-40c6-8bcd-daeffdfe3552",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Jim Nick',\n",
       " 'Katy Perry',\n",
       " 'Kenny Peterson',\n",
       " 'SW',\n",
       " 'Janice Ken',\n",
       " 'Alexander Thomas',\n",
       " 'DL',\n",
       " 'MR',\n",
       " 'Mark Antony',\n",
       " 'John Chan',\n",
       " 'DG',\n",
       " 'Florida Thomson',\n",
       " 'Mark Thomas',\n",
       " 'Alexanderia Peterson',\n",
       " 'Joe Cook',\n",
       " 'JM',\n",
       " 'Matt Antony',\n",
       " 'Bret Lee',\n",
       " 'Lily Jason']"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#or\n",
    "\n",
    "final_list= list(set(data))\n",
    "for i in final_list:\n",
    "   if final_list.count(i)>1:\n",
    "       final_list.remove(i)\n",
    "final_list"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca0aa8ea-3b3e-4ea0-8920-8ceebcadd4ab",
   "metadata": {},
   "source": [
    "## Task 5\n",
    "- Help Julia display the names of the students from final_list in alphabetical order."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "b6e46353-0f6f-4c11-92aa-21584f41385f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Alexander Thomas',\n",
       " 'Alexanderia Peterson',\n",
       " 'Bret Lee',\n",
       " 'DG',\n",
       " 'DL',\n",
       " 'Florida Thomson',\n",
       " 'JM',\n",
       " 'Janice Ken',\n",
       " 'Jim Nick',\n",
       " 'Joe Cook',\n",
       " 'John Chan',\n",
       " 'Katy Perry',\n",
       " 'Kenny Peterson',\n",
       " 'Lily Jason',\n",
       " 'MR',\n",
       " 'Mark Antony',\n",
       " 'Mark Thomas',\n",
       " 'Matt Antony',\n",
       " 'SW']"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_list.sort()\n",
    "final_list"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1697ed59-7054-47a7-9ace-c8de285debc4",
   "metadata": {},
   "source": [
    "## Task 6\n",
    "- The students at the second, twelfth, and last position in final_list get selected in the Spell Bee competition. Help Julia save the names of these students in a different list and display them separately.\n",
    "- Note: The list index begins at 0, so the second student would be at index location 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "096e2ee8-4a13-4d81-a92c-167556862aee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Alexanderia Peterson', 'Katy Perry', 'SW']"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "final_list= [final_list[1], final_list[11],final_list[-1]]\n",
    "final_list"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc76340c-5bcb-4295-be10-9b88a56a3245",
   "metadata": {},
   "source": [
    "## Task 7\n",
    "- Write a program to count the number of integers between 555 and 678 that are divisible by 7.\n",
    "- Note: Exclude 555 and 678."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "ddf39d47-ebe5-4b9a-9972-e98b1db82ec9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The total number of integers that are divisible by 7 is: 17\n"
     ]
    }
   ],
   "source": [
    "count = 0\n",
    "for x in range(556, 678):\n",
    "    if (x % 7 == 0):\n",
    "        count = count + 1\n",
    "        \n",
    "print('The total number of integers that are divisible by 7 is:', count)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89349487-6cf3-4d4e-ba76-2aa0927107f4",
   "metadata": {},
   "source": [
    "## Task 8\n",
    "- Write a Python program that prints the first 30 natural numbers but skips all the numbers that are multiples of n. Accept the value of n as an input from the user.\n",
    "- Note: Natural numbers are positive integers (1, 2, 3, etc.)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "a3e90638-c811-4bfb-a232-6751824abee5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Select a number less than 30:  3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "4\n",
      "5\n",
      "7\n",
      "8\n",
      "10\n",
      "11\n",
      "13\n",
      "14\n",
      "16\n",
      "17\n",
      "19\n",
      "20\n",
      "22\n",
      "23\n",
      "25\n",
      "26\n",
      "28\n",
      "29\n"
     ]
    }
   ],
   "source": [
    "num = int(input('Select a number less than 30: '))\n",
    "for i in range(0, 30):\n",
    "    if i % num != 0:\n",
    "        print(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4662db0-65b3-4e8f-94d5-fdeba7efa219",
   "metadata": {},
   "source": [
    "## Task 9\n",
    "- Find the sum of the corresponding elements of firstlist and secondlistsecond list, store them in a list named thirdlist, and print the result."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "1b03d238-e7e8-4a7c-8388-2120155e1622",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[20, 22, 20, 10, 20, 20, 20, 20, 15]\n"
     ]
    }
   ],
   "source": [
    "firstlist= [1,21,3,4,5,6,7,18,4]\n",
    "secondlist= [19,1,17,6,15,14,13,2,11]\n",
    "thirdlist=[]\n",
    "\n",
    "for i in range(0,len(firstlist)):\n",
    "   sum= firstlist[i]+ secondlist[i]\n",
    "   thirdlist.append(sum)\n",
    "print(thirdlist)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "53254207-e8b7-4e14-9bb8-4b596622152c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
